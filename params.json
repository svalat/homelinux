{"name":"Homelinux","tagline":"A simple source package manager like gentoo but for for your home directory. It also take in account the packages present on your system to not recompile everything. It support import of sources from gentoo, github and custom URLs.","body":"HomeLinux\r\n=========\r\n\r\n\r\nWhat is it ?\r\n------------\r\n\r\nHomelinux is a simple package manager to handle installation of packages in your home directory by rebuilding them from sources.\r\nThe main use case if a user (or developper) running into a non root environnement and needs some extra-package he can't or don't want\r\nto install into the system. Thanks to HomeLinux you can handle the installation of the source package by checking the dependencies\r\navailable on the current system and automatically installing the missing one.\r\n\r\nThe goal is to provide a quick access to the latest version available for all packaging without regarding on the stability.\r\nIt make HomeLinux an interesting tool to test usage of all up-to-date version of packages together to find new build issues.\r\n\r\nAnother usage of HomeLinux can be for HPC datacenters to build quicly some fixed prefix to provide new version to the users without\r\nchanging the operating system. Thanks to HomeLinux it is easier to build a new prefix with updated version in another directory\r\nand making the user moving slowly to new versions by chaning the prefix they inherit from for their home personal prefix.\r\n\r\nFeatures\r\n--------\r\n\r\nIt is inspirated from gentoo package manager and import most of its semantic.\r\n\r\n * Automatic download of sources\r\n * Automatic update of version DB\r\n * Package dependencies\r\n * Useflags\r\n * Package slots\r\n * Check host system package to not rebuild the whole tree if not necessary\r\n (can support multiple system if compatibility name list is provided).\r\n * Inheritance between prefix (Not yet finished)\r\n * Support of module\r\n * Build packages in parallel (experimental)\r\n\r\nPre-requist\r\n-----------\r\n\r\nHomelinux is currently configured to be used on top of debian8 but there is no strict restiction which limit it's usage on other\r\nplatform except that it will not autodetect the presence of native packages. In this case it will tend to rebuild more packages\r\nthan required.\r\n\r\nThe only dependencies are `nodejs`, `npm` and the necessary to download and build basic packages (`tar`,`wget`,`gcc`, `make`...).\r\n\r\nCAUTION, you need a recent vesion of `nodejs` otherwise homelinux silently fail to detect the\r\nsystem packages due to lack of `child_process.execSync()`.\r\n\r\nIf you want to be able to uninstall the packages or make clean update with previous removal of the files, you might want to enable\r\nusage of GNU stow in the config file. You previously need to install `stow` in your system or into the prefix as a first package to\r\nbe install with stow disabled.\r\n\r\nInstallation\r\n------------\r\n\r\nFirst fetch the NPM dependencies :\r\n\r\n\tnpm install\r\n\r\nThen, install and create your prefix with make command :\r\n\r\n\tmake install PREFIX=$HOME/usr\r\n\r\nThen configure your prefix if needed by editing the file. You can find documentation about the \r\nconfiguration into [doc/config.md](doc/config.md).\r\n\r\n\tnano $HOME/usr/homelinux.json\r\n\r\nYou can also setup global user configuration by copying `userconf.json` :\r\n\r\n\tcp userconf.json ~/.homelinux.json\r\n\tnano ~/.homelinux.json\r\n\r\nNow you can load the configuration into your `~/.bashrc` :\r\n\r\n\teval \"`$HOME/usr/bin/hl env`\"\r\n\r\nBefore usage you need to create the cache with :\r\n\r\n\thl update-db\r\n\thl build-cache\r\n\r\nIf you want to be able to uninstall the packages, make clean update or create bin packages,\r\nyou need to install `stow` (or use the one from the system).\r\n\r\n\thl install stow\r\n\t#Then enable usage of stow in config file of prefix\r\n\tnano $HOME/usr/homelinux.json\r\n\r\nIf you use inheritance and want to install a package into an inherited prefix, you need to switch\r\nto this prefix first to make it as active prefix.\r\n\r\n\teval \"`hl switch $HOME/usrbase`\"\r\n\r\nBasic usage\r\n-----------\r\n\r\nYou can use the given commands to install search or sync your repos :\r\n\r\n```sh\r\n\t#provide environnement variables\r\n\thl env\r\n\t\r\n\t#update your package DB (fetch gentoo...)\r\n\thl update-db\r\n\t\r\n\t#install package\r\n\thl install bash                      # use name, automatic search db\r\n\thl install app-shells/bash           # force subdir in gentoo way\r\n\thl install gentoo/htop               # use the gentoo archive (nodeps)\r\n\thl install github/svalat/svUnitTest  # from github repos, use last release\r\n\thl install urls/htop                 # Use from packages/urls.lst\r\n\t\r\n\t#for non HL packages (gentooo, github...) you can provide some deps\r\n\t#infos and conf options into homelinux/packages/quickpackages/, see examples.\r\n\t\r\n\t#you can force the vesion to install with\r\n\thl install htop=4.8   #exact version\r\n\thl install htop<4.8   #less than\r\n\thl install htop<=4.8  #less eq than\r\n\thl install 'htop!4.8' #no this one\r\n\thl install htop~4.8   #regexpn allow all 4.8.X, take last avail\r\n\thl install htop:4     #slot based\r\n\t\r\n\t#search in avail packages\r\n\thl search htop\r\n\t\r\n\t#list installed packages\r\n\thl ls\r\n\t\r\n\t#Whatch generated quickpackages\r\n\thl gen-package gentoo/htop\r\n\thl gen-full-package gentoo/htop\r\n\t\r\n\t#whatch generated install script\r\n\thl gen-install gentoo/htop\r\n```\r\n\r\nWhat it setup\r\n-------------\r\n\r\nCurrently HomeLinux setup the environenement variables for you to fully configure the prefix : \r\n\r\n * `PATH`\r\n * `LD_LIBRARY_PATH`\r\n * `LD_RUN_PATH`\r\n * `CPATH`\r\n * `PERL5LIB`\r\n * `PYTHONPATH`\r\n * `PKG_CONFIG_PATH`\r\n * `MANPATH`\r\n * `MODULEPATH`\r\n * `CMAKE_PREFIX_PATH`\r\n\r\nCreate packages\r\n---------------\r\n\r\nTo create package, check [doc/package.md](doc/package.md). If you don't want to provide full packages but just want to use\r\nas most as possible the default options, you can use the quick package approach defined into [doc/quickpackage.md](doc/quickpackage.md).\r\n\r\nRun unit tests\r\n--------------\r\n\r\nHomeLinux provide some internal unit tests which can by run with mocha :\r\n\r\n```sh\r\n\tnpm install mocha\r\n\t./node_modules/.bin/mocha ./tests\r\n```\r\n\r\nLicence\r\n-------\r\n\r\nHomeLinux is distributed under BSD licence and currently mainly developped by\r\nSÃ©bastien Valat.\r\n","google":"UA-66328786-2","note":"Don't delete this file! It's used internally to help with page regeneration."}